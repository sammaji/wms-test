generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Location {
    id               String         @id @default(cuid())
    aisle            String
    bay              String
    height           String
    label            String         @unique
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    type             String
    putawayBatches   PutawayBatch[]
    stocks           Stock[]
    fromTransactions Transaction[]  @relation("FromLocation")
    toTransactions   Transaction[]  @relation("ToLocation")

    @@index([label])
}

model Company {
    id        String   @id @default(cuid())
    code      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    items     Item[]
    users     User[]

    @@index([code])
}

model Item {
    id           String        @id @default(cuid())
    sku          String
    name         String
    description  String?
    barcode      String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    companyId    String
    company      Company       @relation(fields: [companyId], references: [id])
    stocks       Stock[]
    transactions Transaction[]

    @@unique([companyId, sku])
    @@unique([companyId, barcode])
    @@index([companyId, sku, barcode])
}

model Stock {
    id         String   @id @default(cuid())
    quantity   Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    itemId     String
    locationId String
    item       Item     @relation(fields: [itemId], references: [id])
    location   Location @relation(fields: [locationId], references: [id])

    @@unique([itemId, locationId])
    @@index([itemId])
    @@index([locationId])
}

model Transaction {
    id             String          @id @default(cuid())
    quantity       Int
    type           TransactionType
    createdAt      DateTime        @default(now())
    itemId         String
    fromLocationId String?
    toLocationId   String?
    userId         String?
    putawayBatchId String?
    fromLocation   Location?       @relation("FromLocation", fields: [fromLocationId], references: [id])
    item           Item            @relation(fields: [itemId], references: [id])
    putawayBatch   PutawayBatch?   @relation(fields: [putawayBatchId], references: [id])
    toLocation     Location?       @relation("ToLocation", fields: [toLocationId], references: [id])
    user           User?           @relation(fields: [userId], references: [id])

    status   TransactionStatus @default(COMPLETED)
    undoneAt DateTime?         @updatedAt
    undoneBy String?

    @@index([itemId])
    @@index([fromLocationId])
    @@index([toLocationId])
    @@index([putawayBatchId])
    @@index([userId])
}

model User {
    id           String        @id @default(cuid())
    username     String        @unique
    passwordHash String
    role         UserRole
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    companyId    String?
    transactions Transaction[]
    company      Company?      @relation(fields: [companyId], references: [id])

    @@index([username])
    @@index([companyId])
}

model PutawayBatch {
    id           String        @id @default(cuid())
    locationId   String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    status       String        @default("COMPLETED")
    location     Location      @relation(fields: [locationId], references: [id])
    transactions Transaction[]

    @@index([locationId])
}

enum TransactionType {
    ADD
    REMOVE
    MOVE
}

enum UserRole {
    STAFF
    ADMIN
}

enum TransactionStatus {
    COMPLETED
    UNDONE
}
